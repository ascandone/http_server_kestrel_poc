import Http
import Http/Status
import Json/Decode
import Middleware
import Model/User.{User}

let get_user = fn _req, id {
  let#Middleware.parse_id id = id;

  let user = User {
    id: id,
    name: "JohnDoe",
    age: 42,
  };

  Http.response(Http/Status.ok)
  |> Http.with_json_body(Model/User.encode(user))
  |> Task.of()
}

type UserBody struct {
  name: String,
  age: Int,
}

let user_body_decoder = {
  let#Json/Decode.and_then name = Json/Decode.field("name", Json/Decode.string);
  let#Json/Decode.and_then age = Json/Decode.field("age", Json/Decode.int);
  Json/Decode.of(UserBody {
    name: name,
    age: age,
  })
}

let create_user = fn req {
  let#Middleware.decode_body parsed_body = (req, user_body_decoder);

  let user = User {
    id: 42,
    name: parsed_body.name,
    age: parsed_body.age,
  };

  Http.response(Http/Status.ok)
  |> Http.with_json_body(Model/User.encode(user))
  |> Task.of()
}

pub let router = fn req {
  match Http.url(req) {
    "users" :: Nil => match Http.method(req) {
      "POST" => create_user(req),
      _ => Task.of(Http.response(Http/Status.method_not_allowed)),
    },
    "users" :: id :: Nil => match Http.method(req) {
      "GET" => get_user(req, id),
      _ => Task.of(Http.response(Http/Status.method_not_allowed)),
    },
    "example" :: Nil => {
      let deferred_body = Task.map(Task.sleep(2000), fn _ {
        "hello!"
      });
      Http.response(Http/Status.ok)
      |> Http.with_async_text_body(deferred_body)
      |> Task.of()
    },
    _ => Task.of(Http.response(Http/Status.not_found)),
  }
}

pub let main = Http.create_server(8000, router)
